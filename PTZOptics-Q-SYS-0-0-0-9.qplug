-- PTZOptics Q-SYS Plugin - A Camera Control interface using VISCA-TCP
-- by Dorian White
--
--
-- -- License --
--
-- The MIT License
--
-- Copyright (C) 2023 Dorian White, Haverford Systems Incorporated
--
-- Permission is hereby granted, free of charge, to any person obtaining a copy
-- of this software and associated documentation files (the "Software"), to deal
-- in the Software without restriction, including without limitation the rights
-- to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-- copies of the Software, and to permit persons to whom the Software is
-- furnished to do so, subject to the following conditions:
--
-- The above copyright notice and this permission notice shall be included in
-- all copies or substantial portions of the Software.
--
-- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-- IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-- FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-- AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-- LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-- OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
-- THE SOFTWARE.
--
--
-- The PluginInfo header contains some important information that Q-Sys Designer will parse when compiled.
-- Id is a unique ID given to every plugin. While we typically use randomly generated UUID's, you can use anything here so long as it is unique

---------------------- PluginInfo Section ------------------------------------------------------------------------------------------------------

PluginInfo = {
	Name = "PTZOptics~Camera (0.0.0.9-base)", -- The tilde here indicates folder structure in the Shematic Elements pane
	Version = "0.0.0.9-base",
	Id = "71ab77bf-4614-4a99-a379-85d26df0adaf", -- show this is just a unique id. Show some commented out 'fun' unique ids
	Description = "Plugin for control of a PTZOptics Camera using the VISCA-TCP Protocol",
	ShowDebug = true
}

---------------------- Global Declarations Section ------------------------------------------------------------------------------------------------------

-- total number of quick_presets in design
quick_preset_count 	=    10

-- record of last preset called in design
current_preset   	= 00

-- initial value for ["Preset-Numeric-Entry"]
preset_num_entry 	= "\x00"

-- initial value for ["Pan-Speed"]
pan_speed        	= "\x09" 

-- initial value for ["Tilt-Speed"]
tilt_speed       	= "\x07" 

-- initial value for ["Zoom-Speed"]
zoom_speed       	= "\x07"

-- initial value for ["Focus-Speed"]
focus_speed      	= "\x07"

-- this variable keeps track of when the home button has been pressed
IsHome		        =   "No"

-- Once you've drawn your plugin in Designer, you can determine what colors you use a lot. Save yourself some time by putting them in a table, and then simply calling them later.
local Colors = {
	PTZO_Blue_1 = {147, 204, 234}, --colorspace seems inverted, this color should be light blue
	PTZO_Blue_2 = {48, 102, 190},  --colorspace seems inverted, this color should be medium blue
	PTZO_Blue_3 = {0, 0, 51},      --colorspace seems inverted, this color should be dark blue
	PTZO_Gray   = {147, 149, 152},
	White       = {255, 255, 255},
	Black 	    = {0, 0, 0},
	Red   		= {200, 0, 0},
	Green 		= {0, 242, 0}
}

function GetColor(props)
	return Colors.PTZO_Medium_Blue
	--return Colors.Black
end

---------------------- Properties Section ------------------------------------------------------------------------------------------------------

-- We can let users determine some of the plugin properties by exposing them here
-- While this function can be very useful, it is completely optional and not always needed.
-- If no Properties are set here, only the position and fill properties of your plugin will show in the Properties pane
function GetProperties()
	props = {
		{
			Name = "IP Host",
			Type = "string",
			Value = "192.168.15.100"
		},
		{
			Name = "IP Port",
			Type = "integer",
			Value = 5678,
			Min = 1024,
			Max = 65535
		},
		{
			Name = "Preset Count",
			Type = "integer",
			Value = 10,
			Min = 1,
			Max = 128
		}
	}
	return props
end

-- The below function is optional (like GetProperties() is), but it can allow further customization of what users can and can't do with your plugin.
-- In this example, when Model 1 is selected in the properties pane, the ability to modify some of the properties will be hidden, only allowing customization with Model 2
-- Another application of this is if you have different input/output types for different models, and want those properties to be dynamic in the Properties pane
function RectifyProperties(props)
	return props
end

---------------------- Controls Section ------------------------------------------------------------------------------------------------------

-- The below function is where you will populate the controls for your plugin.
function GetControls(props)
	ctls = {
		-- System Pins
		{
			Name = "Online",
			ControlType = "Indicator",
			IndicatorType = "Led",
			PinStyle = "Output",
			Count = 1,
			UserPin = true
		},
		{
			Name = "ConnectionState",
			ControlType = "Indicator",
			IndicatorType = "Text",
			PinStyle = "Output",
			UserPin = true
		},
		-- Control Pins
		{
			Name = "UserIPAddress",
			ControlType = "Text",
			DefaultValue = "192.168.15.40",
			PinStyle = "Both",
			UserPin = true
		},
		{
			Name = "UserIPPort",
			ControlType = "Knob",
			ControlUnit = "Integer",
			Min = 1,
			Max = 65535,
			DefaultValue = 5678,
			PinStyle = "Both",
			UserPin = true
		},
		{
			Name = "AutoTracking-On",
			ControlType = "Button",
			ButtonType = "Momentary",
			UserPin = true,
			PinStyle = "Input"
		},
		{
			Name = "AutoTracking-Off",
			ControlType = "Button",
			ButtonType = "Momentary",
			UserPin = true,
			PinStyle = "Input"
		},
		{
			Name = "AutoTracking-Subject-Left",
			ControlType = "Button",
			ButtonType = "Momentary",
			UserPin = true,
			PinStyle = "Input"
		},
		{
			Name = "AutoTracking-Subject-OK",
			ControlType = "Button",
			ButtonType = "Momentary",
			UserPin = true,
			PinStyle = "Input"
		},
		{
			Name = "AutoTracking-Subject-Right",
			ControlType = "Button",
			ButtonType = "Momentary",
			UserPin = true,
			PinStyle = "Input"
		},
		{
			Name = "CAM_Pan-Speed",
			ControlType = "Knob",
			ControlUnit = "Integer",
			Min = 1,
			Max = 24,
			UserPin = true,
			PinStyle = "Both"
		},
		{
			Name = "CAM_Tilt-Speed",
			ControlType = "Knob",
			ControlUnit = "Integer",
			Min = 1,
			Max = 20,
			UserPin = true,
			PinStyle = "Both"
		},
		{
			Name = "CAM_Zoom-Speed",
			ControlType = "Knob",
			ControlUnit = "Integer",
			Min = 0,
			Max = 7,
			UserPin = true,
			PinStyle = "Both"
		},
		{
			Name = "CAM_Focus-Speed",
			ControlType = "Knob",
			ControlUnit = "Integer",
			Min = 0,
			Max = 7,
			UserPin = true,
			PinStyle = "Both"
		},
		{
			Name = "PanTiltDrive-Up",
			ControlType = "Button",
			ButtonType = "Momentary",
			UserPin = true,
			PinStyle = "Input"
		},
		{
			Name = "PanTiltDrive-UL",
			ControlType = "Button",
			ButtonType = "Momentary",
			UserPin = true,
			PinStyle = "Input"
		},
		{
			Name = "PanTiltDrive-UR",
			ControlType = "Button",
			ButtonType = "Momentary",
			UserPin = true,
			PinStyle = "Input"
		},
		{
			Name = "PanTiltDrive-Dn",
			ControlType = "Button",
			ButtonType = "Momentary",
			UserPin = true,
			PinStyle = "Input"
		},
		{
			Name = "PanTiltDrive-DL",
			ControlType = "Button",
			ButtonType = "Momentary",
			UserPin = true,
			PinStyle = "Input"
		},
		{
			Name = "PanTiltDrive-DR",
			ControlType = "Button",
			ButtonType = "Momentary",
			UserPin = true,
			PinStyle = "Input"
		},
		{
			Name = "PanTiltDrive-Lt",
			ControlType = "Button",
			ButtonType = "Momentary",
			UserPin = true,
			PinStyle = "Input"
		},
		{
			Name = "PanTiltDrive-Rt",
			ControlType = "Button",
			ButtonType = "Momentary",
			UserPin = true,
			PinStyle = "Input"
		},
		{
			Name = "PanTiltDrive-Hm",
			ControlType = "Button",
			ButtonType = "Momentary",
			UserPin = true,
			PinStyle = "Input"
		},
		{
			Name = "OSD-OpenClose",
			ControlType = "Button",
			ButtonType = "Momentary",
			UserPin = true,
			PinStyle = "Input"
		},
		{
			Name = "OSD-Enter",
			ControlType = "Button",
			ButtonType = "Momentary",
			UserPin = true,
			PinStyle = "Input"
		},
		{
			Name = "OSD-Back",
			ControlType = "Button",
			ButtonType = "Momentary",
			UserPin = true,
			PinStyle = "Input"
		},
		{
			Name = "CAM_Zoom-Z+",
			ControlType = "Button",
			ButtonType = "Momentary",
			UserPin = true,
			PinStyle = "Input"
		},
		{
			Name = "CAM_Zoom-Z-",
			ControlType = "Button",
			ButtonType = "Momentary",
			UserPin = true,
			PinStyle = "Input"
		},
		{
			Name = "CAM_Focus-F+",
			ControlType = "Button",
			ButtonType = "Momentary",
			UserPin = true,
			PinStyle = "Input"
		},
		{
			Name = "CAM_Focus-F-",
			ControlType = "Button",
			ButtonType = "Momentary",
			UserPin = true,
			PinStyle = "Input"
		},
		{
			Name = "CAM_Focus-Snap",
			ControlType = "Button",
			ButtonType = "Momentary",
			UserPin = true,
			PinStyle = "Input"
		},
		{
			Name = "CAM_Memory-Recall",
			ControlType = "Button",
			ButtonType = "Momentary",
			UserPin = true,
			PinStyle = "Input",
			Count = 10
		},
		{
			Name = "Preset-Call",
			ControlType = "Button",
			ButtonType = "Momentary",
			UserPin = true,
			PinStyle = "Input"
		},
		{
			Name = "Preset-Numeric-Entry",
			ControlType = "Knob",
			ControlUnit = "Integer",
			Min = 0,
			Max = 255,
			UserPin = true,
			PinStyle = "Both"
		},
		{
			Name = "Preset-Set",
			ControlType = "Button",
			ButtonType = "Momentary",
			UserPin = true,
			PinStyle = "Input"
		},
		{
			Name = "Preset-Prev",
			ControlType = "Button",
			ButtonType = "Momentary",
			UserPin = true,
			PinStyle = "Input"
		},
		{
			Name = "Preset-Next",
			ControlType = "Button",
			ButtonType = "Momentary",
			UserPin = true,
			PinStyle = "Input"
		}

	}
	return ctls
end

---------------------- Pages Section ------------------------------------------------------------------------------------------------------

-- Variable holding Page Names for ease
local pagenames = {"System"}

function GetPages(props) -- This function allows you to populate pages in your plugin.
	pages = {}
	table.insert(pages, {name = pagenames[1]})
	return pages
end


---------------------- Control Layout Section ------------------------------------------------------------------------------------------------------

function GetControlLayout(props)

	local ActiveRemote = props["page_index"].Value
	quick_preset_count = props["Preset Count"].Value

	--------------------------------------------------------------------------------
	local layout        	= {}
	local row_length    	= 11
	local subbox_length 	= row_length - 2
	
	local btn_x				= 60
	local btn_y				= 30

	local knob_x			= 60
	local knob_y			= 60

	local groupbox_x		= 34
	local groupbox_y		= 34

	local btn_size      	= {btn_x, btn_y}
	local knob_size     	= {knob_x, knob_y}
	local groupbox_size 	= {groupbox_x, groupbox_y}

	local status_centered_x	= 3 * btn_size[1]
	local IPData_groupbox_centered_x	= 2.5 * btn_size[1]

	--------------------------------------------------------------------------------
	-- The title size is [button-width*num-of-buttons-per-row, button-height
	local title_size    	= {row_length * btn_size[1], btn_size[2]}

	--------------------------------------------------------------------------------
	-- The text size is [2*button-width, button-height]
	local txt_size      	= {2 * btn_size[1], btn_size[2]}
	local lng_txt_size     	= {2.5 * btn_size[1], btn_size[2]}
	
	--------------------------------------------------------------------------------
	-- The Status box is standard width and 8 rows long 
	local status_groupbox_position  	= {0, title_size[2] + (0 * groupbox_size[2])}
	local status_groupbox_size      	= {title_size[1], 4.5 * groupbox_size[2]}
	-- The ptz box is standard width and 11 rows long 
	local IPData_groupbox_position 		= {IPData_groupbox_centered_x, status_groupbox_position[2] + (1.7 * btn_size[2])}
	local IPData_groupbox_size     		= {(3 * txt_size[1]), (2.2 * groupbox_size[2])}

	--------------------------------------------------------------------------------
	-- The ptz box is standard width and 11 rows long 
	local ptz_groupbox_position  		= {0, title_size[2] + status_groupbox_size[2] + (0 * btn_size[2])}
	local ptz_groupbox_size      		= {row_length * btn_size[1], (row_length * btn_size[2])+ (2 * btn_size[2])}

	-- The tracking groupbox size is 2 button lengths narrower in width and 2 buttons high
	local tracking_groupbox_position  	= {ptz_groupbox_position[1] + (2 * groupbox_size[1]), ptz_groupbox_position[2] + (1 * btn_size[2])}
	local tracking_groupbox_size      	= {subbox_length * btn_size[1], (2 * groupbox_size[2])}

	-- The PTZF groupbox size is 2 button lengths narrower in width and 3 buttons high
	local PTZF_groupbox_position  		= {tracking_groupbox_position[1], tracking_groupbox_position[2] + tracking_groupbox_size[2]}
	local PTZF_groupbox_size      		= {tracking_groupbox_size[1], (3 * groupbox_size[2])}

	-- The OSD groupbox size is 2 button lengths narrower in width and 1 button high
	local OSD_groupbox_position  		= {PTZF_groupbox_position[1], PTZF_groupbox_position[2] + PTZF_groupbox_size[2]}
	local OSD_groupbox_size      		= {PTZF_groupbox_size[1], (1.5 * groupbox_size[2])}

	-- The Speeds groupbox size is 2 button lengths narrower in width and ~2 button high
	local Speed_groupbox_position  		= {OSD_groupbox_position[1], OSD_groupbox_position[2] + OSD_groupbox_size[2]}
	local Speed_groupbox_size      		= {OSD_groupbox_size[1], (3 * groupbox_size[2])}


	--------------------------------------------------------------------------------
	-- The presets box size is 2 button lengths narrower in width and 2 buttons high
	local presets_groupbox_position 	= {0, ptz_groupbox_position[2] + ptz_groupbox_size[2] + (0 * btn_size[2])}
	local presets_groupbox_size 		= 
	{
		row_length * btn_size[1],
		btn_size[2] + (2 * btn_size[2]) * (math.floor((props["Preset Count"].Value - 1) / row_length) + 1) + 4 * btn_size[2]
	}

	-- The Quick presets groupbox size is 2 button lengths narrower in width and ~3 button high
	local quick_presets_groupbox_position  		= {Speed_groupbox_position[1],  ptz_groupbox_position[2] + ptz_groupbox_size[2] + (1.0 * btn_size[2])}
	local quick_presets_groupbox_size      		= {Speed_groupbox_size[1], (3 * groupbox_size[2])}

	-- The Quick presets groupbox size is 2 button lengths narrower in width and ~3 button high
	local manual_presets_groupbox_position 		= {quick_presets_groupbox_position[1],  quick_presets_groupbox_position[2] + quick_presets_groupbox_size[2]}
	local manual_presets_groupbox_size     		= {quick_presets_groupbox_size[1], (1.3 * groupbox_size[2])}



--- Status Info Section ----------------------------------------------------------------------------------------

	graphics = {
		{
			Type = "Header",
			Text = "PTZOptics Control Interface",
			HTextAlign = "Center",
			Color = Colors.PTZO_Blue_3,
			FontSize = 16,
			Position = {0, 0},
			Size = title_size
		},
		{
			Type = "GroupBox",
			Text = "Status",
			HTextAlign = "Left",
			Fill = Colors.White,
			CornerRadius = 8,
			StrokeColor = Colors.PTZO_Blue_3,
			Color = Colors.PTZO_Blue_3,
			StrokeWidth = 3,
			Position = status_groupbox_position,
			Size = status_groupbox_size
		},
		{
			Type = "GroupBox",
			Text = "IP Host",
			HTextAlign = "Left",
			Fill = Colors.White,
			CornerRadius 	= 8,
			StrokeColor 	= Colors.PTZO_Blue_2,
			Color 			= Colors.PTZO_Blue_2,
			StrokeWidth 	= 1,
			Position 		= IPData_groupbox_position,
			Size 			= IPData_groupbox_size
		},
			--[[
		{
			Type = "Text",
			Text = "Online:",
			Font = "Raleway",
			FontSize = 12,
			FontStyle = "Bold",
			HTextAlign = "Right",
			Color = Colors.PTZO_Blue_3,
			Position = {0, title_size[2] + (0.5 * btn_size[2])},
			Size = txt_size
		},
		--]]
		{
			Type = "Text",
			Text = "Connection:",
			Font = "Raleway",
			FontSize = 12,
			FontStyle = "Bold",
			HTextAlign = "Right",
			Color = Colors.PTZO_Blue_3,
			Position = {status_centered_x, title_size[2] + (0.5 * btn_size[2])},
			Size = txt_size
		},
		{
			Type = "Text",
			Text = "IP Address:",
			Font = "Raleway",
			FontSize = 12,
			FontStyle = "Bold",
			HTextAlign = "Right",
			Color = Colors.PTZO_Blue_3,
			Position = {status_centered_x, title_size[2] + (2.0 * btn_size[2])},
			Size = txt_size
		},
		{
			Type = "Text",
			Text = "IP Port:",
			Font = "Raleway",
			FontSize = 12,
			FontStyle = "Bold",
			HTextAlign = "Right",
			Color = Colors.PTZO_Blue_3,
			Position = {status_centered_x, title_size[2] + (3.0 * btn_size[2])},
			Size = txt_size
		},
		{
			Type = "GroupBox", -- This is the overall groupbox that will give the plugin a more 'contained' look
			Text = "PTZ",
			HTextAlign = "Left",
			Fill = Colors.White,
			CornerRadius = 8,
			StrokeColor = Colors.PTZO_Blue_3,
			Color = Colors.PTZO_Blue_3,
			StrokeWidth = 3,
			Position = ptz_groupbox_position,
			Size = ptz_groupbox_size
		},
		{
			Type = "GroupBox",
			Text = "Tracking",
			HTextAlign = "Left",
			Fill = Colors.White,
			CornerRadius = 4,
			StrokeColor = Colors.PTZO_Blue_2,
			Color = Colors.PTZO_Blue_2,
			StrokeWidth = 1,
			Position = tracking_groupbox_position,
			Size 	 = tracking_groupbox_size
		},
		{
			Type = "GroupBox",
			Text = "PTZF",
			HTextAlign = "Left",
			Fill = Colors.White,
			CornerRadius = 4,
			StrokeColor = Colors.PTZO_Blue_2,
			Color = Colors.PTZO_Blue_2,
			StrokeWidth = 1,
			Position = PTZF_groupbox_position,
			Size 	 = PTZF_groupbox_size
		},
		{
			Type = "GroupBox",
			Text = "OSD",
			HTextAlign = "Left",
			Fill = Colors.White,
			CornerRadius = 4,
			StrokeColor = Colors.PTZO_Blue_2,
			Color = Colors.PTZO_Blue_2,
			StrokeWidth = 1,
			Position = OSD_groupbox_position,
			Size 	 = OSD_groupbox_size
		},
		{
			Type = "GroupBox",
			Text = "Speed",
			HTextAlign = "Left",
			Fill = Colors.White,
			CornerRadius = 4,
			StrokeColor = Colors.PTZO_Blue_2,
			Color = Colors.PTZO_Blue_2,
			StrokeWidth = 1,
			Position = Speed_groupbox_position,
			Size 	 = Speed_groupbox_size
		},
		{
			Type = "GroupBox", -- This is the overall groupbox that will give the plugin a more 'contained' look
			Text = "Presets",
			HTextAlign = "Left",
			Fill = Colors.White,
			CornerRadius = 8,
			StrokeColor = Colors.PTZO_Blue_3,
			Color = Colors.PTZO_Blue_3,
			StrokeWidth = 3,
			Position = presets_groupbox_position,
			Size = presets_groupbox_size
		},
		-- Create group box for quick presets
		{
			Type = "GroupBox",
			Text = "Quick",
			HTextAlign = "Left",
			Fill = Colors.White,
			CornerRadius = 4,
			StrokeColor = Colors.PTZO_Blue_2,
			Color = Colors.PTZO_Blue_2,
			StrokeWidth = 1,
			Position = quick_presets_groupbox_position,
			Size 	 = quick_presets_groupbox_size
		},
		{
			Type = "GroupBox",
			Text = "Manual",
			HTextAlign = "Left",
			Fill = Colors.White,
			CornerRadius = 4,
			StrokeColor = Colors.PTZO_Blue_2,
			Color = Colors.PTZO_Blue_2,
			StrokeWidth = 1,
			Position = manual_presets_groupbox_position,
			Size 	 = manual_presets_groupbox_size
		},
		{
			Type = "Text",
			Text = "__Zoom__",
			Font = "Raleway",
			FontSize = 12,
			FontStyle = "Bold",
			HTextAlign = "Left",
			Color = Colors.PTZO_Blue_2,
			Position = {(1.0 * txt_size[1]), Speed_groupbox_position[2] + (2 * btn_size[2])}, 
			Size = btn_size
		},
		{
			Type = "Text",
			Text = "___Pan___",
			Font = "Raleway",
			FontSize = 12,
			FontStyle = "Bold",
			HTextAlign = "Left",
			Color = Colors.PTZO_Blue_2,
			Position = {(2.0 * txt_size[1]), Speed_groupbox_position[2] + (2 * btn_size[2])}, 
			Size = btn_size
		},
		{
			Type = "Text",
			Text = "___Tilt___",
			Font = "Raleway",
			FontSize = 12,
			FontStyle = "Bold",
			HTextAlign = "Left",
			Color = Colors.PTZO_Blue_2,
			Position = {(3.0 * txt_size[1]), Speed_groupbox_position[2] + (2 * btn_size[2])}, 
			Size = btn_size
		},
		{
			Type = "Text",
			Text = "__Focus__",
			Font = "Raleway",
			FontSize = 12,
			FontStyle = "Bold",
			HTextAlign = "Left",
			Color = Colors.PTZO_Blue_2,
			Position = {(4.0 * txt_size[1]), Speed_groupbox_position[2] + (2 * btn_size[2])}, 
			Size = btn_size
		}

	}
	layout["ConnectionState"] = {
		PrettyName = "Connection State",
		Style = "Text",
		HTextAlign = "Left",
		Padding = 2,
		StrokeWidth = 0,
		Position = {status_centered_x + txt_size[1], title_size[2] + (0.5 * btn_size[2])},
		Size = lng_txt_size
	}
	layout["Online"] = {
		PrettyName = "Online",
		Style = "Indicator",
		Color = Colors.Green,
		OffColor = Colors.Red,
		UnlinkOffColor = true,
		Margin = 4,
		Position = {status_centered_x + (2.3 * txt_size[1] ), title_size[2] + (0.5 * btn_size[2])},
		Size = {btn_size[2], btn_size[2]}
	}
	layout["UserIPAddress"] = {
		PrettyName = "User IP Addr",
		Style = "Text",
		HTextAlign = "Left",
		Color = Colors.PTZO_Gray,
		Padding = 2,
		StrokeWidth = 0,
		Position = {status_centered_x + txt_size[1], title_size[2] + (2.0 * btn_size[2])},
		Size = txt_size
	}
	layout["UserIPPort"] = {
		PrettyName = "User IP Port",
		Style = "Text",
		HTextAlign = "Left",
		Color = Colors.PTZO_Gray,
		Padding = 5,
		StrokeWidth = 0,
		Position = {status_centered_x + txt_size[1], title_size[2] + (3.0 * btn_size[2])},
		Size = btn_size
	}

--- PTZF section --------------------------------------------------------------------------------------------------------
	layout["AutoTracking-On"] = {
		PrettyName = "AutoTracking-On",
		Legend = "Trk On",
		Style = "Button",
		ButtonStyle = "Momentary",
		Position = {ptz_groupbox_position[1] + txt_size[1] + (2 * btn_size[1]), ptz_groupbox_position[2] + (1 * btn_size[2])},
		Size = btn_size
	}
	layout["AutoTracking-Off"] = {
		PrettyName = "AutoTracking-Off",
		Legend = "Trk Off",
		Style = "Button",
		ButtonStyle = "Momentary",
		Position = {ptz_groupbox_position[1] + txt_size[1] + (4 * btn_size[1]), ptz_groupbox_position[2] + (1 * btn_size[2])},
		Size = btn_size
	}
	-- Next Row Down ---------------
	layout["AutoTracking-Subject-Left"] = {
		PrettyName = "AutoTracking~Subject Left",
		Legend = utf8.char(8656),
		Style = "Button",
		ButtonStyle = "Momentary",
		Position = {ptz_groupbox_position[1] + txt_size[1] + (2 * btn_size[1]), ptz_groupbox_position[2] + (2 * btn_size[2])},
		Size = btn_size
	}
	layout["AutoTracking-Subject-OK"] = {
		PrettyName = "AutoTracking~Subject OK",
		Legend = utf8.char(128100),
		Style = "Button",
		ButtonStyle = "Momentary",
		Position = {ptz_groupbox_position[1] + txt_size[1] + (3 * btn_size[1]), ptz_groupbox_position[2] + (2 * btn_size[2])},
		Size = btn_size
	}
	layout["AutoTracking-Subject-Right"] = {
		PrettyName = "AutoTracking~Subject Right",
		Legend = utf8.char(8658),
		Style = "Button",
		ButtonStyle = "Momentary",
		Position = {ptz_groupbox_position[1] + txt_size[1] + (4 * btn_size[1]), ptz_groupbox_position[2] + (2 * btn_size[2])},
		Size = btn_size
	}
	-- Next Row Down ---------------
	layout["CAM_Zoom-Z+"] = {
		PrettyName = "PTZ~Zoom In",
		Legend = "Zoom In",
		Style = "Button",
		ButtonStyle = "Momentary",
		Position = {ptz_groupbox_position[1] + txt_size[1] + (0 * btn_size[1]), ptz_groupbox_position[2] + (3.5 * btn_size[2])},
		Size = btn_size
	}
	layout["PanTiltDrive-UL"] = {
		PrettyName = "PTZ~Tilt UpLeft",
		--Legend = "<^",
		Legend = utf8.char(9700),
		Style = "Button",
		ButtonStyle = "Momentary",
		Position = {ptz_groupbox_position[1] + txt_size[1] + (2 * btn_size[1]), ptz_groupbox_position[2] + (3.5 * btn_size[2])},
		Size = btn_size
	}
	layout["PanTiltDrive-Up"] = {
		PrettyName = "PTZ~Tilt Up",
		--Legend = "▲",
		Legend = utf8.char(9650),
		Style = "Button",
		ButtonStyle = "Momentary",
		Position = {ptz_groupbox_position[1] + txt_size[1] + (3 * btn_size[1]), ptz_groupbox_position[2] + (3.5 * btn_size[2])},
		Size = btn_size
	}
	layout["PanTiltDrive-UR"] = {
		PrettyName = "PTZ~Tilt UpRight",
		--Legend = "^>",
		Legend = utf8.char(9701),
		Style = "Button",
		ButtonStyle = "Momentary",
		Position = {ptz_groupbox_position[1] + txt_size[1] + (4 * btn_size[1]), ptz_groupbox_position[2] + (3.5 * btn_size[2])},
		Size = btn_size
	}
	layout["CAM_Focus-F+"] = {
		PrettyName = "PTZ~Focus In",
		Legend = "Focus In",
		Style = "Button",
		ButtonStyle = "Momentary",
		Position = {ptz_groupbox_position[1] + txt_size[1] + (6 * btn_size[1]), ptz_groupbox_position[2] + (3.5 * btn_size[2])},
		Size = btn_size
	}
	
	-- Next Row Down ---------------
	layout["PanTiltDrive-Lt"] = {
		PrettyName = "PTZ~Pan Left",
		--Legend = "<",
		Legend = utf8.char(9664),
		Style = "Button",
		ButtonStyle = "Momentary",
		Position = {ptz_groupbox_position[1] + txt_size[1] + (2 * btn_size[1]), ptz_groupbox_position[2] + (4.5 * btn_size[2])},
		Size = btn_size
	}
	layout["PanTiltDrive-Hm"] = {
		PrettyName = "PTZ~Pan Home",
		Legend = "⌂",
		Style = "Button",
		ButtonStyle = "Momentary",
		Position = {ptz_groupbox_position[1] + txt_size[1] + (3 * btn_size[1]), ptz_groupbox_position[2] + (4.5 * btn_size[2])},
		Size = btn_size
	}
	layout["PanTiltDrive-Rt"] = {
		PrettyName = "PTZ~Pan Right",
		--Legend = ">",
		Legend = utf8.char(9654),
		Style = "Button",
		ButtonStyle = "Momentary",
		Position = {ptz_groupbox_position[1] + txt_size[1] + (4 * btn_size[1]), ptz_groupbox_position[2] + (4.5 * btn_size[2])},
		Size = btn_size
	}
	layout["CAM_Focus-Snap"] = {
		PrettyName = "PTZ~Snap Focus",
		Legend = "Snap Focus",
		Style = "Button",
		ButtonStyle = "Momentary",
		Position = {ptz_groupbox_position[1] + txt_size[1] + (6 * btn_size[1]), ptz_groupbox_position[2] + (4.5 * btn_size[2])},
		Size = btn_size
	}

	-- Next Row Down ---------------
	layout["CAM_Zoom-Z-"] = {
		PrettyName = "PTZ~Zoom Out",
		Legend = "Zoom Out",
		Style = "Button",
		ButtonStyle = "Momentary",
		Position = {ptz_groupbox_position[1] + txt_size[1] + (0 * btn_size[1]), ptz_groupbox_position[2] + (5.5 * btn_size[2])},
		Size = btn_size
	}
	layout["PanTiltDrive-DL"] = {
		PrettyName = "PTZ~Tilt DownLeft",
		--Legend = "<v",
		Legend = utf8.char(9699),
		Style = "Button",
		ButtonStyle = "Momentary",
		Position = {ptz_groupbox_position[1] + txt_size[1] + (2 * btn_size[1]), ptz_groupbox_position[2] + (5.5 * btn_size[2])},
		Size = btn_size
	}
	layout["PanTiltDrive-Dn"] = {
		PrettyName = "PTZ~Tilt Down",
		--Legend = "v",
		Legend = utf8.char(9660),
		Style = "Button",
		ButtonStyle = "Momentary",
		Position = {ptz_groupbox_position[1] + txt_size[1] + (3 * btn_size[1]), ptz_groupbox_position[2] + (5.5 * btn_size[2])},
		Size = btn_size
	}
	layout["PanTiltDrive-DR"] = {
		PrettyName = "PTZ~Tilt DownRight",
		--Legend = "►▼",
		Legend = utf8.char(9698),
		Style = "Button",
		ButtonStyle = "Momentary",
		Position = {ptz_groupbox_position[1] + txt_size[1] + (4 * btn_size[1]), ptz_groupbox_position[2] + (5.5 * btn_size[2])},
		Size = btn_size
	}
	layout["CAM_Focus-F-"] = {
		PrettyName = "PTZ~Focus Out",
		Legend = "Focus Out",
		Style = "Button",
		ButtonStyle = "Momentary",
		Position = {ptz_groupbox_position[1] + txt_size[1] + (6 * btn_size[1]), ptz_groupbox_position[2] + (5.5 * btn_size[2])},
		Size = btn_size
	}

	-- OSD Row ---------------
	layout["OSD-Enter"] = {
		PrettyName = "OSD Enter",
		Legend = "Enter",
		Style = "Button",
		ButtonStyle = "Momentary",
		Position = {ptz_groupbox_position[1] + txt_size[1] + (1 * btn_size[1]), ptz_groupbox_position[2] + (7 * btn_size[2])},
		Size = btn_size
	}
	layout["OSD-OpenClose"] = {
		PrettyName = "OSD OpenClose",
		Legend = "OSD",
		Style = "Button",
		ButtonStyle = "Momentary",
		Position = {ptz_groupbox_position[1] + txt_size[1] + (3 * btn_size[1]), ptz_groupbox_position[2] + (7 * btn_size[2])},
		Size = btn_size
	}
	layout["OSD-Back"] = {
		PrettyName = "OSD Back",
		Legend = "Back",
		Style = "Button",
		ButtonStyle = "Momentary",
		Position = {ptz_groupbox_position[1] + txt_size[1] + (5 * btn_size[1]), ptz_groupbox_position[2] + (7 * btn_size[2])},
		Size = btn_size
	}
	
	-- Speed Row ---------------
	layout["CAM_Zoom-Speed"] = {
		PrettyName = "PTZ~Zoom Speed",
		Legend = "ZoomSpeed",
		Style = "Knob",
		Position = {ptz_groupbox_position[1] + txt_size[1] + (0 * btn_size[1]), ptz_groupbox_position[2] + (8.5 * btn_size[2])},
		Size = knob_size
	}
	layout["CAM_Pan-Speed"] = {
		PrettyName = "PTZ~Pan Speed",
		Legend = "PanSpeed",
		Style = "Knob",
		Position = {ptz_groupbox_position[1] + txt_size[1] + (2 * btn_size[1]), ptz_groupbox_position[2] + (8.5 * btn_size[2])},
		Size = knob_size
	}
	layout["CAM_Tilt-Speed"] = {
		PrettyName = "PTZ~Tilt Speed",
		Legend = "TiltSpeed",
		Style = "Knob",
		Position = {ptz_groupbox_position[1] + txt_size[1] + (4 * btn_size[1]), ptz_groupbox_position[2] + (8.5 * btn_size[2])},
		Size = knob_size
	}
	layout["CAM_Focus-Speed"] = {
		PrettyName = "PTZ~Focus Speed",
		Legend = "FocusSpeed",
		Style = "Knob",
		Position = {ptz_groupbox_position[1] + txt_size[1] + (6 * btn_size[1]), ptz_groupbox_position[2] + (8.5 * btn_size[2])},
		Size = knob_size
	}
		
--- Presets section --------------------------------------------------------------------------------------------------------

	-- Quick Preset Row -----------
	for i = 1, quick_preset_count do -- For each preset
		local pre_row_length = 5
		local row = math.floor((i - 1) / pre_row_length) + 1
		local column = i - (row - 1) * pre_row_length
		layout["CAM_Memory-Recall " .. i] = {
			PrettyName = "Preset Recall~" .. (i - 1),
			Style = "Button",
			--Color = Colors.Green,
			Legend = "" .. (i - 1),
			Position = {presets_groupbox_position[1] + txt_size[1] + (1.5 * btn_size[1] * (column - 1)), presets_groupbox_position[2] + (1.6 * btn_size[2] * row) - (0.5 * btn_size[2])},
			Size = btn_size
		}
	end

	-- Manual Preset Entry Row -----------
	layout["Preset-Prev"] = {
		PrettyName = "Preset Prev",
		Legend = "Prev",
		Style = "Button",
		ButtonStyle = "Momentary",
		Position = {presets_groupbox_position[1] + txt_size[1] + (0.5 * btn_size[1]), presets_groupbox_position[2] + (4.5 * btn_size[2])},
		Size = btn_size
	}
	layout["Preset-Call"] = {
		PrettyName = "Preset Call",
		Legend = "Call",
		Style = "Button",
		ButtonStyle = "Momentary",
		Position = {presets_groupbox_position[1] + txt_size[1] + (2 * btn_size[1]), presets_groupbox_position[2] + (4.5 * btn_size[2])},
		Size = btn_size
	}
	layout["Preset-Numeric-Entry"] = {
		PrettyName = "Preset Num Entry",
		Style = "Text Field",
		Margin = 2,
		Position = {presets_groupbox_position[1] + txt_size[1] + (3 * btn_size[1]), presets_groupbox_position[2] + (4.5 * btn_size[2])},
		Size = btn_size
	}
	layout["Preset-Set"] = {
		PrettyName = "Preset Set",
		Legend = "Set",
		Style = "Button",
		ButtonStyle = "Momentary",
		Position = {presets_groupbox_position[1] + txt_size[1] + (4 * btn_size[1]), presets_groupbox_position[2] + (4.5 * btn_size[2])},
		Size = btn_size
	}
	layout["Preset-Next"] = {
		PrettyName = "Preset-Next",
		Legend = "Next",
		Style = "Button",
		ButtonStyle = "Momentary",
		Position = {presets_groupbox_position[1] + txt_size[1] + (5.5 * btn_size[1]), presets_groupbox_position[2] + (4.5 * btn_size[2])},
		Size = btn_size
	}

	return layout, graphics
end  -- Layout Section Complete ----------------------------------------------------------------------------------------------------------------


-- Components provide a way to save or retain certain settings without necessarily displaying it in another control such as a combobox.
-- For example, the when someone hits the "Save" button on this plugin, it saves the RGB values in the "rgb_storage" component below.
-- This allows us to do things 'under the hood' which gives the plugin a much sleeker feel.
function GetComponents(props)
	return {}
end  -- Components Section Complete ----------------------------------------------------------------------------------------------------------------

-------------- LUA Code Execution Center --------------------------------------------------------------------------------------------------------

if Controls then
	-- This is the area where you would put your 'Runtime' code, or the 'control' aspect of your plugin.
	-- Once you are confident in your script, simply copy and paste that script here, and then you can fully test the plugin completely
	-- Don't forget to comment out your code pin and hide the debug before distributing!

	-- Initialize PTZF Speed Knobs ------- 
	Controls["CAM_Pan-Speed"].Value   = 10
	Controls["CAM_Tilt-Speed"].Value  = 8
	Controls["CAM_Zoom-Speed"].Value  = 3
	Controls["CAM_Focus-Speed"].Value = 3

-------------- Network Event Processing -----------------------------------------------------------------------------------

	-- Comms Variable
	Rx = ""

	-- Build TCP Client
	conn = TcpSocket.New()
	conn.ReadTimeout = 0
	conn.WriteTimeout = 0
	conn.ReconnectTimeout = 5

	-- Create and setup Polling
	timerPoll = Timer.New()

	timerPoll.EventHandler = function(timer)
		fnPoll()
	end

	function fnInitPoll()
		timerPoll:Stop()
		timerPoll:Start(20)
	end

	function fnPoll()
		-- Poll the Info
		fnSend("") --
	end

	-- Data Sending Helper Function
	function fnSend(cmd)
		if conn.IsConnected then
			-- Send to device
			print("-->Visca::" .. cmd)
			conn:Write("\x81" .. cmd .. "\xFF")
			-- Reset Polling
			fnInitPoll()
		end
	end
	
	function setConnState(msg)
		Controls["ConnectionState"].String =
			"[" .. Properties["IP Host"].String .. ":" .. Properties["IP Port"].Value .. "] " .. msg
	end
	-- Setup Utility Callbacks as required
	conn.Connected = function(conn)
		setConnState("Connected")
		fnPoll()
	end
	conn.Reconnect = function(conn)
		setConnState("Reconnect")
	end
	conn.Closed = function(conn)
		setConnState("Closed")
		Controls.Online.Boolean = false
	end
	conn.Error = function(conn, err)
		setConnState("Error")
	end
	conn.Timeout = function(conn, err)
		setConnState("Timeout")
	end
	
	-- Helper Function - Open TCP Connection
	function fnConnect()
		-- Open Connection
		Properties["IP Host"].String = Controls["UserIPAddress"].String
		Properties["IP Host"].Value = Controls["UserIPAddress"].Value
		Properties["IP Port"].Value = Controls["UserIPPort"].Value

		conn:Connect(Properties["IP Host"].String, Properties["IP Port"].Value)
		-- Set IP Host value
		setConnState("Connecting")
	end

	-- Create and setup the Communications Timeout
	timerComms = Timer.New()
	timerComms.EventHandler = function(timer)
		timer:Stop()
		Controls.Online.Boolean = false
		print("Connection Timed Out")
		conn:Disconnect()
		fnConnect()
	end

	conn.Data = function(conn)
		Rx = Rx .. conn:Read(conn.BufferLength)
		while Rx:find("\xFF") do
			Packet = Rx:sub(1, Rx:find("\xFF"))
			Rx = Rx:sub(#Packet + 1)
			-- Trim Packet
			timerComms:Stop()
			Controls.Online.Boolean = true
			timerComms:Start(45)
		end
		-- Data Processing here
	end
	
-------------- Command Subroutines --------------------------------------------------------------------------------------


--- goPanTilt Subroutine	
	function goPanTilt(dir)
		if dir == "" then
			fnSend("\x01\x06\x01\x06\x06\x03\x03") -- Stop
		else
			fnSend("\x01\x06\x01" .. pan_speed .. tilt_speed .. dir) -- Move
		end
	end

--- goPanTiltHome Subroutine	
	function goPanTiltHome()
		fnSend("\x01\x06\x04") -- home position
	end
	
--- goZoom Subroutine	
	function goZoom(dir)
		if dir == "" then
			fnSend("\x01\x04\x07\x00") -- Stop
		elseif dir == "\x02" then
			zoom_speed = string.char(32 + Controls["CAM_Zoom-Speed"].Value)			
			fnSend("\x01\x04\x07" .. zoom_speed) -- Zoom In
		elseif dir == "\x03" then
			zoom_speed = string.char(48 + Controls["CAM_Zoom-Speed"].Value)			
			fnSend("\x01\x04\x07" .. zoom_speed) -- Zoom Out
		end
	end
	
--- goSnapFocus Subroutine	
	function goSnapFocus()
		fnSend("\x01\x04\x38\x04") -- Snap Focus is One-Push-Auto Focus
	end

--- goFocus Subroutine	
	function goFocus(dir)
		if dir == "" then
			fnSend("\x01\x04\x08\x00") -- Stop
		elseif dir == "\x02" then		
			fnSend("\x01\x04\x38\x03") -- change to manual focus mode
			focus_speed = string.char(32 + Controls["CAM_Focus-Speed"].Value)			
			fnSend("\x01\x04\x08" .. focus_speed) -- Focus In
		elseif dir == "\x03" then		
			fnSend("\x01\x04\x38\x03") -- change to manual focus mode
			focus_speed = string.char(48 + Controls["CAM_Focus-Speed"].Value)			
			fnSend("\x01\x04\x08" .. focus_speed) -- Focus Out
		end
	end


	
-------------- Main Control Event Handler ---------------------------------------	
 	
	for k, v in pairs(Controls) do
	
------- PanTilt cmds 	
		if k:sub(1, #"PanTiltDrive-") == "PanTiltDrive-" then
			v.EventHandler = function(changedControl)
				if changedControl.Boolean == true then
					if k:sub(-2, -1) == "Up" then
						goPanTilt("\x03\01") -- Up
					elseif k:sub(-2, -1) == "Dn" then
						goPanTilt("\x03\02") -- Down
					elseif k:sub(-2, -1) == "Lt" then
						goPanTilt("\x01\03") -- Left
					elseif k:sub(-2, -1) == "Rt" then
						goPanTilt("\x02\03") -- Right
					elseif k:sub(-2, -1) == "UL" then
						goPanTilt("\x01\01") -- UpLeft
					elseif k:sub(-2, -1) == "UR" then
						goPanTilt("\x02\01") -- UpRight
					elseif k:sub(-2, -1) == "DL" then
						goPanTilt("\x01\02") -- DownLeft
					elseif k:sub(-2, -1) == "DR" then
						goPanTilt("\x02\02") -- DownRight
					elseif k:sub(-2, -1) == "Hm" then
						goPanTiltHome() -- Go Home
						IsHome = "Yes"
					end
				elseif IsHome == "Yes" then
					IsHome = "No"
				else
					goPanTilt("") -- Stop
				end
			end

------- Zoom cmds 	
		elseif k:sub(1, #"CAM_Zoom-") == "CAM_Zoom-" then
			v.EventHandler = function(changedControl)
				if changedControl.Boolean == true then
					if k:sub(-2, -1) == "Z+" then
						goZoom("\x02") -- In
					elseif k:sub(-2, -1) == "Z-" then
						goZoom("\x03") -- Out
					end
				else
					goZoom("") -- Stop
				end
			end
			
------- Focus cmds 	
		elseif k:sub(1, #"CAM_Focus-") == "CAM_Focus-" then
			v.EventHandler = function(changedControl)
				if changedControl.Boolean == true then
					if k:sub(-2, -1) == "F+" then
						goFocus("\x02") -- In
					elseif k:sub(-2, -1) == "F-" then
						goFocus("\x03") -- Out
					elseif k:sub(-4, -1) == "Snap" then
						goSnapFocus() -- Snap Focus
					end
				else
					goFocus("") -- Stop
				end
			end
		end
	end


-------------- PTZF Speed Parameter Event Handlers --------------------------------

------- Pan speed Event 	
	Controls["CAM_Pan-Speed"].EventHandler = function()
		print("Pan Speed: " .. Controls["CAM_Pan-Speed"].String)
		pan_speed = string.char(Controls["CAM_Pan-Speed"].Value)
	end

------- Tilt speed Event 	
	Controls["CAM_Tilt-Speed"].EventHandler = function()
		print("Tilt Speed: " .. Controls["CAM_Tilt-Speed"].String)
		tilt_speed = string.char(Controls["CAM_Tilt-Speed"].Value)
	end

------- Zoom speed Event 	
	Controls["CAM_Zoom-Speed"].EventHandler = function()
		print("Zoom Speed: " .. Controls["CAM_Zoom-Speed"].String)
	end

------- Focus speed Event 	
	Controls["CAM_Focus-Speed"].EventHandler = function()
		print("Focus Speed: " .. Controls["CAM_Focus-Speed"].String)
	end



-------- Auto Tracking Event Handlers ---------------------------------------------

------- Auto Tracking On cmd --------------------------------
		Controls["AutoTracking-On"].EventHandler = function()
			if Controls["AutoTracking-On"].Boolean then
				fnSend("\x0A\x11\x54\x02")
			end
		end

------- Auto Tracking Off cmd --------------------------------
		Controls["AutoTracking-Off"].EventHandler = function()
			if Controls["AutoTracking-Off"].Boolean then
				fnSend("\x0A\x11\x54\x03")
			end
		end

------- Auto Tracking Subject Left cmd -----------------------
		Controls["AutoTracking-Subject-Left"].EventHandler = function()
			if Controls["AutoTracking-Subject-Left"].Boolean then
				fnSend("\x0A\x11\xa3\x02")
			end
		end

------- Auto Tracking Subject Right cmd -----------------------
		Controls["AutoTracking-Subject-Right"].EventHandler = function()
			if Controls["AutoTracking-Subject-Right"].Boolean then
				fnSend("\x0A\x11\xa3\x03")
			end
		end

------- Auto Tracking Subject OK cmd -----------------------
		Controls["AutoTracking-Subject-OK"].EventHandler = function()
			if Controls["AutoTracking-Subject-OK"].Boolean then
				fnSend("\x0A\x11\xa3\x04")
			end
		end

-------------- Preset Event Handlers ----------------------------------------------
	
------- Quick Preset Call Events 	
	for i = 1, quick_preset_count do
		Controls["CAM_Memory-Recall"][i].EventHandler = function()
			if Controls["CAM_Memory-Recall"][i].Boolean then			
				local quick_preset_index = string.char(i-1)						
				fnSend("\x01\x04\x3F\x02" .. quick_preset_index) -- call preset
				Controls["Preset-Numeric-Entry"].Value = (i-1)
			end
		end
	end

------- Preset Num Entry Event	
	Controls["Preset-Numeric-Entry"].EventHandler = function()
		print("Preset num entry: " .. Controls["Preset-Numeric-Entry"].String)
		preset_num_entry = string.char(Controls["Preset-Numeric-Entry"].Value)
	end

------- Preset Num Entry Call Event 	
	Controls["Preset-Call"].EventHandler = function()
		if Controls["Preset-Call"].Boolean then
			fnSend("\x01\x04\x3F\x02" .. preset_num_entry) -- call preset
		end
	end

------- Preset Num Entry Set Event 	
	Controls["Preset-Set"].EventHandler = function()
		if Controls["Preset-Set"].Boolean then
			fnSend("\x01\x04\x3F\x01" .. preset_num_entry) -- set preset
		end
	end

------- Preset Next Event
	Controls["Preset-Next"].EventHandler = function()
		if Controls["Preset-Next"].Boolean then
			if Controls["Preset-Numeric-Entry"].Value < 255 then 
				Controls["Preset-Numeric-Entry"].Value = Controls["Preset-Numeric-Entry"].Value + 1
				fnSend("\x01\x04\x3F\x02" .. (string.char(Controls["Preset-Numeric-Entry"].Value))) -- call next preset					
			end
		end
	end

------- Preset Prev Event
	Controls["Preset-Prev"].EventHandler = function()
		if Controls["Preset-Prev"].Boolean then
			if Controls["Preset-Numeric-Entry"].Value >= 0 then 
				Controls["Preset-Numeric-Entry"].Value = Controls["Preset-Numeric-Entry"].Value - 1
				fnSend("\x01\x04\x3F\x02" .. (string.char(Controls["Preset-Numeric-Entry"].Value))) -- call previous preset					
			end
		end
	end

-------------- OSD Event Handlers --------------------------------------------------

------- OSD Open/Close Num Event 	
	Controls["OSD-OpenClose"].EventHandler = function()
		if Controls["OSD-OpenClose"].Boolean then
			fnSend("\x01\x04\x3F\x02\x5F")
		end
	end

------- OSD Enter Num Event 	
	Controls["OSD-Enter"].EventHandler = function()
		if Controls["OSD-Enter"].Boolean then
			fnSend("\x01\x06\x06\x05")
		end
	end

------- OSD Back Event 		
	Controls["OSD-Back"].EventHandler = function()
		if Controls["OSD-Back"].Boolean then
			fnSend("\x01\x06\x06\x04")
		end
	end

-------------- IP Config Event Handlers --------------------------------------------------

------- User-Defined IP Address Event 	
	Controls["UserIPAddress"].EventHandler = function()
		--if Controls["UserIPAddress"].Boolean then
			Properties["IP Host"].String = Controls["UserIPAddress"].String
			Properties["IP Host"].Value  = Controls["UserIPAddress"].Value
			conn:Disconnect()
			fnConnect()
		--end
	end

------- User-Defined IP Port Event 	
	Controls["UserIPPort"].EventHandler = function()
		--if Controls["UserIPPort"].Boolean then
			Properties["IP Port"].Value = Controls["UserIPPort"].Value
			conn:Disconnect()
			fnConnect()
		--end
	end

	-- Startup
	fnConnect()


end  ------------------------- End LUA Code ----------------------------------------------
